"use strict";(self.webpackChunkperp_docs=self.webpackChunkperp_docs||[]).push([[217],{1863:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>i,default:()=>y,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var n=a(8168),r=(a(6540),a(5680));const l={},i=void 0,d={unversionedId:"interfaces/IClearingHouse",id:"interfaces/IClearingHouse",title:"IClearingHouse",description:"AddLiquidityParams",source:"@site/docs/interfaces/IClearingHouse.md",sourceDirName:"interfaces",slug:"/interfaces/IClearingHouse",permalink:"/docs/interfaces/IClearingHouse",draft:!1,editUrl:"https://github.com/perpetual-protocol/perp-docs/tree/main/docs/interfaces/IClearingHouse.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IBaseToken",permalink:"/docs/interfaces/IBaseToken"},next:{title:"IClearingHouseConfig",permalink:"/docs/interfaces/IClearingHouseConfig"}},g={},o=[{value:"AddLiquidityParams",id:"addliquidityparams",level:3},{value:"RemoveLiquidityParams",id:"removeliquidityparams",level:3},{value:"AddLiquidityResponse",id:"addliquidityresponse",level:3},{value:"RemoveLiquidityResponse",id:"removeliquidityresponse",level:3},{value:"OpenPositionParams",id:"openpositionparams",level:3},{value:"ClosePositionParams",id:"closepositionparams",level:3},{value:"CollectPendingFeeParams",id:"collectpendingfeeparams",level:3},{value:"Functions",id:"functions",level:2},{value:"addLiquidity",id:"addliquidity",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Return Values:",id:"return-values",level:4},{value:"removeLiquidity",id:"removeliquidity",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Return Values:",id:"return-values-1",level:4},{value:"settleAllFunding",id:"settleallfunding",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"openPosition",id:"openposition",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Return Values:",id:"return-values-2",level:4},{value:"openPositionFor",id:"openpositionfor",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Return Values:",id:"return-values-3",level:4},{value:"closePosition",id:"closeposition",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"Return Values:",id:"return-values-4",level:4},{value:"liquidate",id:"liquidate",level:3},{value:"Parameters:",id:"parameters-6",level:4},{value:"liquidate",id:"liquidate-1",level:3},{value:"Parameters:",id:"parameters-7",level:4},{value:"cancelExcessOrders",id:"cancelexcessorders",level:3},{value:"Parameters:",id:"parameters-8",level:4},{value:"cancelAllExcessOrders",id:"cancelallexcessorders",level:3},{value:"Parameters:",id:"parameters-9",level:4},{value:"quitMarket",id:"quitmarket",level:3},{value:"Parameters:",id:"parameters-10",level:4},{value:"Return Values:",id:"return-values-5",level:4},{value:"getAccountValue",id:"getaccountvalue",level:3},{value:"Parameters:",id:"parameters-11",level:4},{value:"Return Values:",id:"return-values-6",level:4},{value:"getQuoteToken",id:"getquotetoken",level:3},{value:"Return Values:",id:"return-values-7",level:4},{value:"getUniswapV3Factory",id:"getuniswapv3factory",level:3},{value:"Return Values:",id:"return-values-8",level:4},{value:"getClearingHouseConfig",id:"getclearinghouseconfig",level:3},{value:"Return Values:",id:"return-values-9",level:4},{value:"getVault",id:"getvault",level:3},{value:"Return Values:",id:"return-values-10",level:4},{value:"getExchange",id:"getexchange",level:3},{value:"Return Values:",id:"return-values-11",level:4},{value:"getOrderBook",id:"getorderbook",level:3},{value:"Return Values:",id:"return-values-12",level:4},{value:"getAccountBalance",id:"getaccountbalance",level:3},{value:"Return Values:",id:"return-values-13",level:4},{value:"getInsuranceFund",id:"getinsurancefund",level:3},{value:"Return Values:",id:"return-values-14",level:4},{value:"getDelegateApproval",id:"getdelegateapproval",level:3},{value:"Return Values:",id:"return-values-15",level:4},{value:"Events",id:"events",level:2},{value:"ReferredPositionChanged",id:"referredpositionchanged",level:3},{value:"Parameters:",id:"parameters-12",level:4},{value:"PositionLiquidated",id:"positionliquidated",level:3},{value:"Parameters:",id:"parameters-13",level:4},{value:"LiquidityChanged",id:"liquiditychanged",level:3},{value:"Parameters:",id:"parameters-14",level:4},{value:"PositionChanged",id:"positionchanged",level:3},{value:"Parameters:",id:"parameters-15",level:4},{value:"PositionClosed",id:"positionclosed",level:3},{value:"Parameters:",id:"parameters-16",level:4},{value:"FundingPaymentSettled",id:"fundingpaymentsettled",level:3},{value:"Parameters:",id:"parameters-17",level:4},{value:"TrustedForwarderChanged",id:"trustedforwarderchanged",level:3},{value:"Parameters:",id:"parameters-18",level:4},{value:"DelegateApprovalChanged",id:"delegateapprovalchanged",level:3},{value:"Parameters:",id:"parameters-19",level:4}],p={toc:o},s="wrapper";function y(e){let{components:t,...a}=e;return(0,r.yg)(s,(0,n.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"addliquidityparams"},"AddLiquidityParams"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  struct AddLiquidityParams(\n    address baseToken\n    uint256 base\n    uint256 quote\n    int24 lowerTick\n    int24 upperTick\n    uint256 minBase\n    uint256 minQuote\n    bool useTakerBalance\n    uint256 deadline\n  )\n")),(0,r.yg)("h3",{id:"removeliquidityparams"},"RemoveLiquidityParams"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  struct RemoveLiquidityParams(\n    address baseToken\n    int24 lowerTick\n    int24 upperTick\n    uint128 liquidity\n    uint256 minBase\n    uint256 minQuote\n    uint256 deadline\n  )\n")),(0,r.yg)("h3",{id:"addliquidityresponse"},"AddLiquidityResponse"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  struct AddLiquidityResponse(\n    uint256 base\n    uint256 quote\n    uint256 fee\n    uint256 liquidity\n  )\n")),(0,r.yg)("h3",{id:"removeliquidityresponse"},"RemoveLiquidityResponse"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  struct RemoveLiquidityResponse(\n    uint256 base\n    uint256 quote\n    uint256 fee\n  )\n")),(0,r.yg)("h3",{id:"openpositionparams"},"OpenPositionParams"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  struct OpenPositionParams(\n    address baseToken\n    bool isBaseToQuote\n    bool isExactInput\n    uint256 amount\n    uint256 oppositeAmountBound\n    uint256 deadline\n    uint160 sqrtPriceLimitX96\n    bytes32 referralCode\n  )\n")),(0,r.yg)("h3",{id:"closepositionparams"},"ClosePositionParams"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  struct ClosePositionParams(\n    address baseToken\n    uint160 sqrtPriceLimitX96\n    uint256 oppositeAmountBound\n    uint256 deadline\n    bytes32 referralCode\n  )\n")),(0,r.yg)("h3",{id:"collectpendingfeeparams"},"CollectPendingFeeParams"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  struct CollectPendingFeeParams(\n    address trader\n    address baseToken\n    int24 lowerTick\n    int24 upperTick\n  )\n")),(0,r.yg)("h2",{id:"functions"},"Functions"),(0,r.yg)("h3",{id:"addliquidity"},"addLiquidity"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function addLiquidity(\n    struct IClearingHouse.AddLiquidityParams params\n  ) external returns (struct IClearingHouse.AddLiquidityResponse response)\n")),(0,r.yg)("p",null,"Maker can call ",(0,r.yg)("inlineCode",{parentName:"p"},"addLiquidity")," to provide liquidity on Uniswap V3 pool"),(0,r.yg)("p",null,"Tx will fail if adding ",(0,r.yg)("inlineCode",{parentName:"p"},"base == 0 && quote == 0")," / ",(0,r.yg)("inlineCode",{parentName:"p"},"liquidity == 0")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"AddLiquidityParams.useTakerBalance")," is only accept ",(0,r.yg)("inlineCode",{parentName:"li"},"false")," now")),(0,r.yg)("h4",{id:"parameters"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"params")),(0,r.yg)("td",{parentName:"tr",align:"left"},"struct IClearingHouse.AddLiquidityParams"),(0,r.yg)("td",{parentName:"tr",align:"left"},"AddLiquidityParams struct")))),(0,r.yg)("h4",{id:"return-values"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"response")),(0,r.yg)("td",{parentName:"tr",align:"left"},"struct IClearingHouse.AddLiquidityResponse"),(0,r.yg)("td",{parentName:"tr",align:"left"},"AddLiquidityResponse struct")))),(0,r.yg)("h3",{id:"removeliquidity"},"removeLiquidity"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function removeLiquidity(\n    struct IClearingHouse.RemoveLiquidityParams params\n  ) external returns (struct IClearingHouse.RemoveLiquidityResponse response)\n")),(0,r.yg)("p",null,"Maker can call ",(0,r.yg)("inlineCode",{parentName:"p"},"removeLiquidity")," to remove liquidity"),(0,r.yg)("p",null,"remove liquidity will transfer maker impermanent position to taker position,\nif ",(0,r.yg)("inlineCode",{parentName:"p"},"liquidity")," of RemoveLiquidityParams struct is zero, the action will collect fee from\npool to maker"),(0,r.yg)("h4",{id:"parameters-1"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"params")),(0,r.yg)("td",{parentName:"tr",align:"left"},"struct IClearingHouse.RemoveLiquidityParams"),(0,r.yg)("td",{parentName:"tr",align:"left"},"RemoveLiquidityParams struct")))),(0,r.yg)("h4",{id:"return-values-1"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"response")),(0,r.yg)("td",{parentName:"tr",align:"left"},"struct IClearingHouse.RemoveLiquidityResponse"),(0,r.yg)("td",{parentName:"tr",align:"left"},"RemoveLiquidityResponse struct")))),(0,r.yg)("h3",{id:"settleallfunding"},"settleAllFunding"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function settleAllFunding(\n    address trader\n  ) external\n")),(0,r.yg)("p",null,"Settle all markets fundingPayment to owedRealized Pnl"),(0,r.yg)("h4",{id:"parameters-2"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of trader")))),(0,r.yg)("h3",{id:"openposition"},"openPosition"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function openPosition(\n    struct IClearingHouse.OpenPositionParams params\n  ) external returns (uint256 base, uint256 quote)\n")),(0,r.yg)("p",null,"Trader can call ",(0,r.yg)("inlineCode",{parentName:"p"},"openPosition")," to long/short on baseToken market"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"OpenPositionParams.oppositeAmountBound"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote"),(0,r.yg)("li",{parentName:"ul"},"B2Q + exact output, want less input base as possible, so we set a upper bound of input base"),(0,r.yg)("li",{parentName:"ul"},"Q2B + exact input, want more output base as possible, so we set a lower bound of output base"),(0,r.yg)("li",{parentName:"ul"},"Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote",(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"when it's set to 0, it will disable slippage protection entirely regardless of exact input or output\nwhen it's over or under the bound, it will be reverted"))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"OpenPositionParams.sqrtPriceLimitX96"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"B2Q: the price cannot be less than this value after the swap"),(0,r.yg)("li",{parentName:"ul"},"Q2B: the price cannot be greater than this value after the swap",(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"it will fill the trade until it reaches the price limit but WON'T REVERT\nwhen it's set to 0, it will disable price limit;\nwhen it's 0 and exact output, the output amount is required to be identical to the param amount")))))),(0,r.yg)("h4",{id:"parameters-3"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"params")),(0,r.yg)("td",{parentName:"tr",align:"left"},"struct IClearingHouse.OpenPositionParams"),(0,r.yg)("td",{parentName:"tr",align:"left"},"OpenPositionParams struct")))),(0,r.yg)("h4",{id:"return-values-2"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"base")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of baseToken the taker got or spent")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"quote")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of quoteToken the taker got or spent")))),(0,r.yg)("h3",{id:"openpositionfor"},"openPositionFor"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function openPositionFor(\n    address trader,\n    struct IClearingHouse.OpenPositionParams params\n  ) external returns (uint256 base, uint256 quote, uint256 fee)\n")),(0,r.yg)("h4",{id:"parameters-4"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of trader")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"params")),(0,r.yg)("td",{parentName:"tr",align:"left"},"struct IClearingHouse.OpenPositionParams"),(0,r.yg)("td",{parentName:"tr",align:"left"},"OpenPositionParams struct is the same as ",(0,r.yg)("inlineCode",{parentName:"td"},"openPosition()"))))),(0,r.yg)("h4",{id:"return-values-3"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"base")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of baseToken the taker got or spent")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"quote")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of quoteToken the taker got or spent")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"fee")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The trading fee")))),(0,r.yg)("h3",{id:"closeposition"},"closePosition"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function closePosition(\n    struct IClearingHouse.ClosePositionParams params\n  ) external returns (uint256 base, uint256 quote)\n")),(0,r.yg)("p",null,"Close trader's position"),(0,r.yg)("h4",{id:"parameters-5"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"params")),(0,r.yg)("td",{parentName:"tr",align:"left"},"struct IClearingHouse.ClosePositionParams"),(0,r.yg)("td",{parentName:"tr",align:"left"},"ClosePositionParams struct")))),(0,r.yg)("h4",{id:"return-values-4"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"base")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of baseToken the taker got or spent")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"quote")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of quoteToken the taker got or spent")))),(0,r.yg)("h3",{id:"liquidate"},"liquidate"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function liquidate(\n    address trader,\n    address baseToken,\n    int256 positionSize\n  ) external\n")),(0,r.yg)("p",null,"If trader is underwater, any one can call ",(0,r.yg)("inlineCode",{parentName:"p"},"liquidate")," to liquidate this trader"),(0,r.yg)("p",null,"If trader has open orders, need to call ",(0,r.yg)("inlineCode",{parentName:"p"},"cancelAllExcessOrders")," first\nIf positionSize is greater than maxLiquidatePositionSize, liquidate maxLiquidatePositionSize by default\nIf margin ratio >= 0.5 ",(0,r.yg)("em",{parentName:"p"}," mmRatio,\nmaxLiquidateRatio = MIN((1, 0.5 ")," totalAbsPositionValue / absPositionValue)\nIf margin ratio < 0.5 ",(0,r.yg)("em",{parentName:"p"}," mmRatio, maxLiquidateRatio = 1\nmaxLiquidatePositionSize = positionSize ")," maxLiquidateRatio"),(0,r.yg)("h4",{id:"parameters-6"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of trader")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of baseToken")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"positionSize")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"the position size to be liquidated by liquidator")))),(0,r.yg)("h3",{id:"liquidate-1"},"liquidate"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function liquidate(\n    address trader,\n    address baseToken\n  ) external\n")),(0,r.yg)("p",null,"liquidate trader's position and will liquidate the max possible position size"),(0,r.yg)("p",null,"If margin ratio >= 0.5 ",(0,r.yg)("em",{parentName:"p"}," mmRatio,\nmaxLiquidateRatio = MIN((1, 0.5 ")," totalAbsPositionValue / absPositionValue)\nIf margin ratio < 0.5 ",(0,r.yg)("em",{parentName:"p"}," mmRatio, maxLiquidateRatio = 1\nmaxLiquidatePositionSize = positionSize ")," maxLiquidateRatio"),(0,r.yg)("h4",{id:"parameters-7"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of trader")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of baseToken")))),(0,r.yg)("h3",{id:"cancelexcessorders"},"cancelExcessOrders"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function cancelExcessOrders(\n    address maker,\n    address baseToken,\n    bytes32[] orderIds\n  ) external\n")),(0,r.yg)("p",null,"Cancel excess order of a maker"),(0,r.yg)("p",null,"Order id can get from ",(0,r.yg)("inlineCode",{parentName:"p"},"OrderBook.getOpenOrderIds")),(0,r.yg)("h4",{id:"parameters-8"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"maker")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of Maker")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of baseToken")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"orderIds")),(0,r.yg)("td",{parentName:"tr",align:"left"},"bytes32[]"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The id of the order")))),(0,r.yg)("h3",{id:"cancelallexcessorders"},"cancelAllExcessOrders"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function cancelAllExcessOrders(\n    address maker,\n    address baseToken\n  ) external\n")),(0,r.yg)("p",null,"Cancel all excess orders of a maker if the maker is underwater"),(0,r.yg)("p",null,"This function won't fail if the maker has no order but fails when maker is not underwater"),(0,r.yg)("h4",{id:"parameters-9"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"maker")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of maker")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of baseToken")))),(0,r.yg)("h3",{id:"quitmarket"},"quitMarket"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function quitMarket(\n    address trader,\n    address baseToken\n  ) external returns (uint256 base, uint256 quote)\n")),(0,r.yg)("p",null,"Close all positions and remove all liquidities of a trader in the closed market"),(0,r.yg)("h4",{id:"parameters-10"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of trader")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of baseToken")))),(0,r.yg)("h4",{id:"return-values-5"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"base")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of base token that is closed")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"quote")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of quote token that is closed")))),(0,r.yg)("h3",{id:"getaccountvalue"},"getAccountValue"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getAccountValue(\n    address trader\n  ) external returns (int256 accountValue)\n")),(0,r.yg)("p",null,"Get account value of trader"),(0,r.yg)("p",null,"accountValue = totalCollateralValue + totalUnrealizedPnl, in 18 decimals"),(0,r.yg)("h4",{id:"parameters-11"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of trader")))),(0,r.yg)("h4",{id:"return-values-6"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"accountValue")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The account value of trader")))),(0,r.yg)("h3",{id:"getquotetoken"},"getQuoteToken"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getQuoteToken(\n  ) external returns (address quoteToken)\n")),(0,r.yg)("p",null,"Get QuoteToken address"),(0,r.yg)("h4",{id:"return-values-7"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"quoteToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The quote token address")))),(0,r.yg)("h3",{id:"getuniswapv3factory"},"getUniswapV3Factory"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getUniswapV3Factory(\n  ) external returns (address factory)\n")),(0,r.yg)("p",null,"Get UniswapV3Factory address"),(0,r.yg)("h4",{id:"return-values-8"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"factory")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"UniswapV3Factory address")))),(0,r.yg)("h3",{id:"getclearinghouseconfig"},"getClearingHouseConfig"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getClearingHouseConfig(\n  ) external returns (address clearingHouseConfig)\n")),(0,r.yg)("p",null,"Get ClearingHouseConfig address"),(0,r.yg)("h4",{id:"return-values-9"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"clearingHouseConfig")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"ClearingHouseConfig address")))),(0,r.yg)("h3",{id:"getvault"},"getVault"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getVault(\n  ) external returns (address vault)\n")),(0,r.yg)("p",null,"Get ",(0,r.yg)("inlineCode",{parentName:"p"},"Vault")," address"),(0,r.yg)("h4",{id:"return-values-10"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"vault")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"Vault")," address")))),(0,r.yg)("h3",{id:"getexchange"},"getExchange"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getExchange(\n  ) external returns (address exchange)\n")),(0,r.yg)("p",null,"Get ",(0,r.yg)("inlineCode",{parentName:"p"},"Exchange")," address"),(0,r.yg)("h4",{id:"return-values-11"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"exchange")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"Exchange")," address")))),(0,r.yg)("h3",{id:"getorderbook"},"getOrderBook"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getOrderBook(\n  ) external returns (address orderBook)\n")),(0,r.yg)("p",null,"Get ",(0,r.yg)("inlineCode",{parentName:"p"},"OrderBook")," address"),(0,r.yg)("h4",{id:"return-values-12"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"orderBook")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"OrderBook")," address")))),(0,r.yg)("h3",{id:"getaccountbalance"},"getAccountBalance"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getAccountBalance(\n  ) external returns (address accountBalance)\n")),(0,r.yg)("p",null,"Get AccountBalance address"),(0,r.yg)("h4",{id:"return-values-13"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"accountBalance")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"AccountBalance")," address")))),(0,r.yg)("h3",{id:"getinsurancefund"},"getInsuranceFund"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getInsuranceFund(\n  ) external returns (address insuranceFund)\n")),(0,r.yg)("p",null,"Get ",(0,r.yg)("inlineCode",{parentName:"p"},"InsuranceFund")," address"),(0,r.yg)("h4",{id:"return-values-14"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"insuranceFund")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"InsuranceFund")," address")))),(0,r.yg)("h3",{id:"getdelegateapproval"},"getDelegateApproval"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  function getDelegateApproval(\n  ) external returns (address delegateApproval)\n")),(0,r.yg)("p",null,"Get ",(0,r.yg)("inlineCode",{parentName:"p"},"DelegateApproval")," address"),(0,r.yg)("h4",{id:"return-values-15"},"Return Values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"delegateApproval")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"DelegateApproval")," address")))),(0,r.yg)("h2",{id:"events"},"Events"),(0,r.yg)("h3",{id:"referredpositionchanged"},"ReferredPositionChanged"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  event ReferredPositionChanged(\n    bytes32 referralCode\n  )\n")),(0,r.yg)("p",null,"Emitted when open position with non-zero referral code"),(0,r.yg)("h4",{id:"parameters-12"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"referralCode")),(0,r.yg)("td",{parentName:"tr",align:"left"},"bytes32"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The referral code by partners")))),(0,r.yg)("h3",{id:"positionliquidated"},"PositionLiquidated"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  event PositionLiquidated(\n    address trader,\n    address baseToken,\n    uint256 positionNotional,\n    uint256 positionSize,\n    uint256 liquidationFee,\n    address liquidator\n  )\n")),(0,r.yg)("p",null,"Emitted when taker position is being liquidated"),(0,r.yg)("h4",{id:"parameters-13"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The trader who has been liquidated")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Virtual base token(ETH, BTC, etc...) address")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"positionNotional")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The cost of position")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"positionSize")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The size of position")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"liquidationFee")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The fee of liquidate")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"liquidator")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of liquidator")))),(0,r.yg)("h3",{id:"liquiditychanged"},"LiquidityChanged"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  event LiquidityChanged(\n    address maker,\n    address baseToken,\n    address quoteToken,\n    int24 lowerTick,\n    int24 upperTick,\n    int256 base,\n    int256 quote,\n    int128 liquidity,\n    uint256 quoteFee\n  )\n")),(0,r.yg)("p",null,"Emitted when maker's liquidity of a order changed"),(0,r.yg)("h4",{id:"parameters-14"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"maker")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The one who provide liquidity")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of virtual base token(ETH, BTC, etc...)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"quoteToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of virtual USD token")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"lowerTick")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int24"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The lower tick of the position in which to add liquidity")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"upperTick")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int24"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The upper tick of the position in which to add liquidity")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"base")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of base token added (> 0) / removed (< 0) as liquidity; fees not included")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"quote")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of quote token added ... (same as the above)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"liquidity")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int128"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of liquidity unit added (> 0) / removed (< 0)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"quoteFee")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The amount of quote token the maker received as fees")))),(0,r.yg)("h3",{id:"positionchanged"},"PositionChanged"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  event PositionChanged(\n    address trader,\n    address baseToken,\n    int256 exchangedPositionSize,\n    int256 exchangedPositionNotional,\n    uint256 fee,\n    int256 openNotional,\n    int256 realizedPnl,\n    uint256 sqrtPriceAfterX96\n  )\n")),(0,r.yg)("p",null,"Emitted when taker's position is being changed"),(0,r.yg)("h4",{id:"parameters-15"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Trader address")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of virtual base token(ETH, BTC, etc...)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"exchangedPositionSize")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The actual amount swap to uniswapV3 pool")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"exchangedPositionNotional")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The cost of position, include fee")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"fee")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The fee of open/close position")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"openNotional")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The cost of open/close position, < 0: long, > 0: short")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"realizedPnl")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The realized Pnl after open/close position")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"sqrtPriceAfterX96")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The sqrt price after swap, in X96")))),(0,r.yg)("h3",{id:"positionclosed"},"PositionClosed"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  event PositionClosed(\n    address trader,\n    address baseToken,\n    int256 closedPositionSize,\n    int256 closedPositionNotional,\n    int256 openNotional,\n    int256 realizedPnl,\n    uint256 closedPrice\n  )\n")),(0,r.yg)("p",null,"Emitted when taker close her position in closed market"),(0,r.yg)("h4",{id:"parameters-16"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Trader address")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of virtual base token(ETH, BTC, etc...)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"closedPositionSize")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Trader's position size in closed market")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"closedPositionNotional")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Trader's position notional in closed market, based on closed price")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"openNotional")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The cost of open/close position, < 0: long, > 0: short")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"realizedPnl")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The realized Pnl after close position")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"closedPrice")),(0,r.yg)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The close price of position")))),(0,r.yg)("h3",{id:"fundingpaymentsettled"},"FundingPaymentSettled"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  event FundingPaymentSettled(\n    address trader,\n    address baseToken,\n    int256 fundingPayment\n  )\n")),(0,r.yg)("p",null,"Emitted when settling a trader's funding payment"),(0,r.yg)("h4",{id:"parameters-17"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trader")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of trader")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"baseToken")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of virtual base token(ETH, BTC, etc...)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"fundingPayment")),(0,r.yg)("td",{parentName:"tr",align:"left"},"int256"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The fundingPayment of trader on baseToken market, > 0: payment, < 0 : receipt")))),(0,r.yg)("h3",{id:"trustedforwarderchanged"},"TrustedForwarderChanged"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  event TrustedForwarderChanged(\n    address forwarder\n  )\n")),(0,r.yg)("p",null,"Emitted when trusted forwarder address changed"),(0,r.yg)("p",null,"TrustedForward is only used for metaTx"),(0,r.yg)("h4",{id:"parameters-18"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"forwarder")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The trusted forwarder address")))),(0,r.yg)("h3",{id:"delegateapprovalchanged"},"DelegateApprovalChanged"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-solidity"},"  event DelegateApprovalChanged(\n    address delegateApproval\n  )\n")),(0,r.yg)("p",null,"Emitted when DelegateApproval address changed"),(0,r.yg)("h4",{id:"parameters-19"},"Parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"delegateApproval")),(0,r.yg)("td",{parentName:"tr",align:"left"},"address"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The address of DelegateApproval")))))}y.isMDXComponent=!0},5680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>u});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var g=n.createContext({}),o=function(e){var t=n.useContext(g),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(g.Provider,{value:t},e.children)},s="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,g=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=o(a),m=r,u=s["".concat(g,".").concat(m)]||s[m]||y[m]||l;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var d={};for(var g in t)hasOwnProperty.call(t,g)&&(d[g]=t[g]);d.originalType=e,d[s]="string"==typeof e?e:r,i[1]=d;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);