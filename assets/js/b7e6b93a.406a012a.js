"use strict";(self.webpackChunkperp_docs=self.webpackChunkperp_docs||[]).push([[677],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),d=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(a),f=n,m=u["".concat(c,".").concat(f)]||u[f]||p[f]||i;return a?r.createElement(m,o(o({ref:t},s),{},{components:a})):r.createElement(m,o({ref:t},s))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8916:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const i={id:"referral-program-delegation",title:"Referral Program Delegation Guide for Contracts"},o="Referral Program Delegation Guide for Contracts",l={unversionedId:"guides/referral-program-delegation",id:"guides/referral-program-delegation",title:"Referral Program Delegation Guide for Contracts",description:"In the new Referral Program, an account needs to lock 10 vePERP to participate. However, since only EOAs can lock vePERP, if you\u2019re using a contract as a referral partner or trader, your contract must delegate to an EOA (aka the beneficiary) which can lock vePERP on the contract\u2019s behalf. When you claim rewards, the process is the same as before, the only difference is the rewarded vePERP will be distributed to the delegated EOA instead of the contract who owns the referral code or uses a referral code to trade.",source:"@site/docs/guides/ReferralProgramDelegationGuideForContracts.md",sourceDirName:"guides",slug:"/guides/referral-program-delegation",permalink:"/docs/guides/referral-program-delegation",draft:!1,editUrl:"https://github.com/perpetual-protocol/perp-docs/tree/main/docs/guides/ReferralProgramDelegationGuideForContracts.md",tags:[],version:"current",frontMatter:{id:"referral-program-delegation",title:"Referral Program Delegation Guide for Contracts"},sidebar:"tutorialSidebar",previous:{title:"Impermanent Loss Calculation",permalink:"/docs/guides/impermanent-loss"}},c={},d=[{value:"How to Delegate?",id:"how-to-delegate",level:2},{value:"What is QualifiedMultiplier?",id:"what-is-qualifiedmultiplier",level:2}],s={toc:d};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"referral-program-delegation-guide-for-contracts"},"Referral Program Delegation Guide for Contracts"),(0,n.kt)("p",null,"In the new Referral Program, an account needs to lock ",(0,n.kt)("strong",{parentName:"p"},"10 vePERP")," to participate. However, since only EOAs can lock vePERP, if you\u2019re using a contract as a referral partner or trader, your contract must ",(0,n.kt)("strong",{parentName:"p"},"delegate")," to an EOA (aka the beneficiary) which can lock vePERP on the contract\u2019s behalf. When you claim rewards, the process is the same as before, the only difference is the rewarded vePERP will be distributed to the delegated EOA instead of the contract who owns the referral code or uses a referral code to trade."),(0,n.kt)("p",null,"N",(0,n.kt)("strong",{parentName:"p"},"o action is required if you\u2019re using an EOA as a referral partner or trader. Only contracts need to delegate.")),(0,n.kt)("h2",{id:"how-to-delegate"},"How to Delegate?"),(0,n.kt)("p",null,"Your contract can delegate through our ",(0,n.kt)("inlineCode",{parentName:"p"},"vePERPReferralRewardDelegate")," contract, and the address is ",(0,n.kt)("inlineCode",{parentName:"p"},"0x2dE8e18BDaef25C2DE0bED29C8B72E49261CA88d")," on Optimism mainnet. You could also check the contract on ",(0,n.kt)("a",{parentName:"p",href:"https://optimistic.etherscan.io/address/0x2dE8e18BDaef25C2DE0bED29C8B72E49261CA88d"},"Etherscan.")," You could check out the source code on GitHub: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/perpetual-protocol/voting-escrow/blob/main/contracts/RewardDelegate.sol"},"perpetual-protocol/voting-escrow"),"."),(0,n.kt)("p",null,"Here is the interface of ",(0,n.kt)("inlineCode",{parentName:"p"},"vePERPReferralRewardDelegate"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"interface IRewardDelegate {\n    // should be called by the partner/trader contract, to delegate to an EOA who locks vePERP on the partner/trader contract's behalf\n    function setBeneficiaryCandidate(address candidate) external;\n\n    // should be called by the EOA (beneficiary), to confirm the delegation\n    function updateBeneficiary(address truster) external;\n\n    // should be called by the partner/trader contract, if you decided to revoke the delegation\n    function clearBeneficiary(address beneficiary) external;\n\n    function getBeneficiaryCandidate(address truster) external view returns (address);\n\n    function getBeneficiaryAndQualifiedMultiplier(address user) external view returns (address, uint256);\n}\n")),(0,n.kt)("p",null,"Assume that you\u2019re using ",(0,n.kt)("inlineCode",{parentName:"p"},"PartnerContract")," as a referral partner, the account that owns a referral code; Also, ",(0,n.kt)("inlineCode",{parentName:"p"},"TraderContract")," as a referral trader, the account that uses a referral code to trade. And you would like to delegate both ",(0,n.kt)("inlineCode",{parentName:"p"},"PartnerContract")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"TraderContract"),"\u2019s referral rewards to an EOA ",(0,n.kt)("inlineCode",{parentName:"p"},"Alice"),"."),(0,n.kt)("p",null,"First, you will need to modify your ",(0,n.kt)("inlineCode",{parentName:"p"},"PartnerContract")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"TraderContract")," to implement ",(0,n.kt)("inlineCode",{parentName:"p"},"setBeneficiaryCandidate()"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"interface IRewardDelegate {\n    function setBeneficiaryCandidate(address candidate) external;\n    function clearBeneficiary(address beneficiary) external;\n}\n\n// do the same thing for TraderContract\ncontract PartnerContract is OwnableUpgradeable {\n    ...\n\n    // add the following functions to your contract\n    function setBeneficiaryCandidate(address candidate) external onlyOwner {\n        IRewardDelegate(rewardDelegate).setBeneficiaryCandidate(candidate);\n    }\n\n    function clearBeneficiary(address beneficiary) external onlyOwner {\n        IRewardDelegate(rewardDelegate).clearBeneficiary(beneficiary);\n    }\n}\n")),(0,n.kt)("p",null,"After the deployment, both ",(0,n.kt)("inlineCode",{parentName:"p"},"PartnerContract")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"TraderContract")," could then assign ",(0,n.kt)("inlineCode",{parentName:"p"},"Alice")," as the beneficiary, and ",(0,n.kt)("inlineCode",{parentName:"p"},"Alice")," needs to confirm 2 delegations:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"// for PartnerContract\nconst partnerSetBeneficiaryCandidateTx = await partnerContract\n  .connect(partnerContractOwner)\n  .setBeneficiaryCandidate(alice.address)\nawait partnerSetBeneficiaryCandidateTx.wait()\n\nconst aliceUpdateBeneficiaryForPartnerTx = vePERPReferralRewardDelegate\n  .connect(alice)\n  .updateBeneficiary(partnerContract.address)\nawait aliceUpdateBeneficiaryForPartnerTx.wait()\n\n// for TraderContract\nconst traderSetBeneficiaryCandidateTx = await traderContract\n  .connect(traderContractOwner)\n  .setBeneficiaryCandidate(alice.address)\nawait traderSetBeneficiaryCandidateTx.wait()\n\nconst aliceUpdateBeneficiaryForTraderTx = vePERPReferralRewardDelegate\n  .connect(alice)\n  .updateBeneficiary(traderContract.address)\nawait aliceUpdateBeneficiaryForTraderTx.wait()\n")),(0,n.kt)("p",null,"It\u2019s also worth noting that only contracts can call ",(0,n.kt)("inlineCode",{parentName:"p"},"RewardDelegate.setBeneficiaryCandidate()"),", and only an EOA can be set as the beneficiary. On the other hand, an EOA cannot set another EOA or contract as the beneficiary. EOAs have no need to delegate since EOAs are not restricted from locking vePERP."),(0,n.kt)("h2",{id:"what-is-qualifiedmultiplier"},"What is QualifiedMultiplier?"),(0,n.kt)("p",null,"You might notice that there is a ",(0,n.kt)("inlineCode",{parentName:"p"},"getBeneficiaryAndQualifiedMultiplier(user)")," function in ",(0,n.kt)("inlineCode",{parentName:"p"},"vePERPReferralRewardDelegate"),"."),(0,n.kt)("p",null,"Since contracts cannot lock vePERP, the delegated EOA (beneficiary) is the one who locks vePERP for your contracts. Also, multiple contracts can all delegate to the same beneficiary. We use ",(0,n.kt)("inlineCode",{parentName:"p"},"qualifiedMultiplier * 10 vePERP")," to calculate the required vePERP amount of a beneficiary. The base value of ",(0,n.kt)("inlineCode",{parentName:"p"},"qualifiedMultiplier")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"1")," when no contracts delegate to the beneficiary; Once the beneficiary accepts any delegation, the ",(0,n.kt)("inlineCode",{parentName:"p"},"qualifiedMultiplier")," will be the base value ",(0,n.kt)("inlineCode",{parentName:"p"},"1")," + how many contracts delegate to the beneficiary."),(0,n.kt)("p",null,"In the above cases, there are two contracts (",(0,n.kt)("inlineCode",{parentName:"p"},"PartnerContract")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"TraderContract"),") that delegate to ",(0,n.kt)("inlineCode",{parentName:"p"},"Alice")," as the beneficiary. The ",(0,n.kt)("inlineCode",{parentName:"p"},"qualifiedMultiplier")," of ",(0,n.kt)("inlineCode",{parentName:"p"},"Alice")," would be ",(0,n.kt)("inlineCode",{parentName:"p"},"1 (base value) + 2 (two delegations) = 3"),". The required vePERP amount of ",(0,n.kt)("inlineCode",{parentName:"p"},"Alice")," would be ",(0,n.kt)("inlineCode",{parentName:"p"},"3 * 10 = 30 vePERP"),". That means ",(0,n.kt)("inlineCode",{parentName:"p"},"Alice")," must have 30 vePERP, so that the two contracts who delegated to ",(0,n.kt)("inlineCode",{parentName:"p"},"Alice")," become eligible to participate in the Referral Program."),(0,n.kt)("p",null,"The results of calling ",(0,n.kt)("inlineCode",{parentName:"p"},"getBeneficiaryAndQualifiedMultiplier(truster)")," would be:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"await vePERPReferralRewardDelegate.getBeneficiaryAndQualifiedMultiplier(partnerContract.address)\n// returns [aliceAddress, 3]\n\nawait vePERPReferralRewardDelegate.getBeneficiaryAndQualifiedMultiplier(traderContract.address)\n// returns [aliceAddress, 3]\n\nawait vePERPReferralRewardDelegate.getBeneficiaryAndQualifiedMultiplier(bob.address)\n// since no one delegates to Bob, so Bob's beneficiary is himself and his qualifiedMultiplier is 1\n// returns [bobAddress, 1]\n")))}p.isMDXComponent=!0}}]);